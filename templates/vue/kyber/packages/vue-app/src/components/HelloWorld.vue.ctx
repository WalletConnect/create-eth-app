{
  "callToAction": "Read On-Chain Exchange Rate",
  "graphqlQueryName": "GET_FULL_TRADES",
  "imports": [
    "import { MAINNET_ID, addresses, abis } from \"@kyber-app/contracts\";",
    "import GET_FULL_TRADES from \"../graphql/subgraph\";"
  ],
  "learnItems": [
    {
      "label": "Core Docs",
      "url": "https://developer.kyber.network/"
    },
    {
      "label": "Community Chat",
      "url": "https://discord.gg/NfFMVz6"
    },
    {
      "label": "Reddit Community",
      "url": "https://reddit.com/r/kybernetwork/"
    },
    {
      "label": "Twitter",
      "url": "https://twitter.com/kybernetwork"
    }
  ],
  "mounted": {
    "readData": [
      "if (!loading && !stale && data && data.fullTrades) {",
      "  console.log({ markets: data.fullTrades });",
      "}"
    ]
  },
  "readOnChainData": [
    "// Should replace with the end-user wallet, e.g. Metamask",
    "const defaultProvider = getDefaultProvider();",
    "// Create an instance of an ethers.js Contract",
    "// Read more about ethers.js on https://docs.ethers.io/v5/api/contract/contract/",
    "const kyberNetworkProxy = new Contract(",
    "  addresses[MAINNET_ID].kyberNetworkProxyV2,",
    "  abis.kyberNetworkProxyV2,",
    "  defaultProvider,",
    ");",
    "// Price of 1 ETH in DAI",
    "const exchangeRate = await kyberNetworkProxy.getExpectedRate(",
    "  \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",",
    "  \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",",
    "  \"1000000000000000000\",",
    ");",
    "console.log({ exchangeRate });"
  ],
  "whatToLearn": "Kyber"
}
